// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  player_id   Int          @id @default(autoincrement())
  name        String       @unique
  gamePlayers GamePlayer[]
}

model Role {
  role_id     Int          @id @default(autoincrement())
  name        String       @unique
  tag         String // "citizen" or "mafia"
  description String? // role explanaition
  gamePlayers GamePlayer[]
  actionTypes ActionType[]
}

model Game {
  game_id         Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  currentDay      Int              @default(1)
  currentPhase    String           @default("day")
  gamePlayers     GamePlayer[]
  actionLogs      ActionLog[]
  seatAssignments SeatAssignment[]
}

model GamePlayer {
  id        Int      @id @default(autoincrement())
  game_id   Int
  player_id Int
  role_id   Int
  seat      Int
  side      String // "citizen" or "mafia"
  alive     Boolean  @default(true)
  removedAt String?
  cause     String?
  won       Boolean?

  game            Game             @relation(fields: [game_id], references: [game_id])
  player          Player           @relation(fields: [player_id], references: [player_id])
  role            Role             @relation(fields: [role_id], references: [role_id])
  actionLogs      ActionLog[]
  seatAssignments SeatAssignment[]
}

model ActionType {
  action_id   Int     @id @default(autoincrement())
  name        String  @unique
  phase       String // "day", "voting", "night", "will"
  role_id     Int?
  description String?

  minTargets        Int? // Minimum number of targets required
  maxTargets        Int? // Maximum number of targets allowed (null = unlimited)
  requiresRoleGuess Boolean @default(false) // For role detection actions

  role       Role?       @relation(fields: [role_id], references: [role_id])
  actionLogs ActionLog[]
}

model ActionLog {
  log_id        Int     @id @default(autoincrement())
  game_id       Int
  gamePlayer_id Int
  actionType_id Int
  day           Int
  phase         String
  targets       String
  notes         String?

  game       Game       @relation(fields: [game_id], references: [game_id])
  gamePlayer GamePlayer @relation(fields: [gamePlayer_id], references: [id])
  actionType ActionType @relation(fields: [actionType_id], references: [action_id])
}

model SeatAssignment {
  id            Int    @id @default(autoincrement())
  game_id       Int
  gamePlayer_id Int
  day           Int
  phase         String
  seatNumber    Int

  gamePlayer GamePlayer @relation(fields: [gamePlayer_id], references: [id])
  game       Game       @relation(fields: [game_id], references: [game_id])
}
